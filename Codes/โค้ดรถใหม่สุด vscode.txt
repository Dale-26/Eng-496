#include <WiFi.h>
#include <WebServer.h>
#include <WebSocketsServer.h>

const char* ssid = "ESP32_Car";
const char* password = "12345678";

WebServer server(80);
WebSocketsServer webSocket = WebSocketsServer(81);

String mode = "MANUAL";           // Current mode
String lastCommand = "None";      // Last command sent to Arduino

// ====== Soil Moisture (YL-69/YL-38) ======
#define MOIST_PIN 34          // AO -> GPIO34 (ADC1_CH6)
const int ADC_BITS = 12;      // ESP32 default 12-bit (0..4095)
const int ADC_MAX  = 4095;

// ค่าคาลิเบรต: วัด "อากาศ" (แห้ง) แล้วใส่เป็น DRY, วัด "จุ่มน้ำ" แล้วใส่เป็น WET
// ปกติ YL-69 ยิ่งชื้น ค่ายิ่ง "ต่ำลง" (เพราะตัวต้านทานลดลง) — ปรับตามค่าที่คุณวัดจริง
int ADC_DRY = 3000;   // ตัวอย่างค่าเมื่อแทงในอากาศ
int ADC_WET = 1100;   // ตัวอย่างค่าเมื่อจุ่มน้ำหรือดินแฉะ

// กรองค่าแบบค่าเฉลี่ยถ่วงน้ำหนัก (EMA)
float moist_pct_ema = 0.0f;
const float EMA_ALPHA = 0.2f;  // 0.1–0.3 กำลังดี

// HTML + JS
const char htmlPage[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <title>ESP32 Car Control</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body { font-family: Arial; margin:0; padding:0; text-align:center; user-select:none; -webkit-user-select:none; -webkit-tap-highlight-color: transparent; }
    #status { margin: 20px; }
    #top-left { position: fixed; top: 20px; left: 20px; }
    #servoD { width: 60px; height: 60px; font-size: 18px; border-radius: 50%; border: none; cursor: pointer; opacity: 0.9; background-color: deepskyblue; color: #fff; }
    #servoD:active { opacity: 1; }
    #left-controls { position: fixed; bottom: 50px; left: 20px; display: flex; flex-direction: column; gap: 15px; }
    #right-controls { position: fixed; bottom: 50px; right: 20px; display: flex; gap: 15px; }
    button { width: 80px; height: 80px; font-size: 18px; border-radius: 50%; border: none; cursor: pointer; opacity: 0.8; user-select:none; }
    button:active { opacity: 1; }
    #forward { background-color: lightgreen; }
    #backward { background-color: lightcoral; }
    #turnLeft, #turnRight { background-color: orange; }

    /* แผงแสดงความชื้น */
    #moist-card { margin: 12px auto 0; width: 92%; max-width: 520px; padding: 12px 16px; border-radius: 14px; box-shadow: 0 2px 10px rgba(0,0,0,0.08); text-align:left; }
    #moist-val { font-size: 28px; font-weight: bold; }
    #moist-bar { height: 10px; background:#eee; border-radius: 8px; overflow: hidden; }
    #moist-fill { height: 100%; width:0%; }
  </style>
</head>
<body>

<h2>ESP32 Car Control</h2>

<!-- แผงแสดงความชื้นดิน -->
<div id="moist-card">
  <div style="display:flex; justify-content:space-between; align-items:center;">
    <div>Soil Moisture</div>
    <div id="moist-val">-- %</div>
  </div>
  <div id="moist-bar"><div id="moist-fill"></div></div>
 <small>Updated every 1 second (adjust calibration in the code: ADC_DRY / ADC_WET)</small>

</div>

<div id="status">
  <p>Current Mode: <span id="currentMode">MANUAL</span></p>
  <p>Last Command Sent: <span id="lastCmd">None</span></p>
  <button onclick="setMode('MANUAL')">Manual</button>
  <button onclick="setMode('AUTO')">Auto</button>
</div>

<!-- ปุ่มซ้ายบน: ส่ง "D" ไป Arduino -->
<div id="top-left">
  <button id="servoD" onclick="sendCmd('D')">D</button>
</div>

<div id="left-controls">
  <button id="forward">Forward</button>
  <button id="backward">Backward</button>
</div>

<!-- Right side -->
<div id="right-controls">
  <button id="turnLeft">Left</button>
  <button id="turnRight">Right</button>
</div>

<script>
var ws = new WebSocket('ws://' + location.hostname + ':81/');
ws.onopen = function(){ console.log('Connected to ESP32'); };
ws.onmessage = function(evt){
  var data = evt.data;
  if(data.startsWith("MODE:")) document.getElementById('currentMode').innerText = data.substring(5);
  else document.getElementById('lastCmd').innerText = data;
};

function sendCmd(cmd){
  ws.send(cmd);
  document.getElementById('lastCmd').innerText = cmd;
}
function setMode(m){ ws.send("MODE:" + m); }

function bindButton(id, cmd){
  const btn = document.getElementById(id);
  btn.addEventListener('mousedown', ()=> sendCmd(cmd));
  btn.addEventListener('touchstart', ()=> sendCmd(cmd));
  btn.addEventListener('mouseup', ()=> sendCmd('S'));
  btn.addEventListener('mouseleave', ()=> sendCmd('S'));
  btn.addEventListener('touchend', ()=> sendCmd('S'));
  btn.addEventListener('touchcancel', ()=> sendCmd('S'));
  btn.addEventListener('contextmenu', e => e.preventDefault());
}
bindButton('forward','F');
bindButton('backward','B');
bindButton('turnLeft','L');
bindButton('turnRight','R');

// ====== อัปเดตความชื้นทุก 1 วิ ======
function updateMoist(){
  fetch('/moisture').then(r=>r.text()).then(t=>{
    let pct = parseFloat(t);
    if (isNaN(pct)) return;
    pct = Math.max(0, Math.min(100, pct));
    document.getElementById('moist-val').innerText = pct.toFixed(0) + ' %';
    const fill = document.getElementById('moist-fill');
    fill.style.width = pct + '%';
    // ไล่สี: แห้ง=แดง → ชื้น=เขียว
    const r = Math.round(255 - (pct*2.55));
    const g = Math.round(pct*2.55);
    fill.style.backgroundColor = 'rgb(' + r + ',' + g + ',80)';
  }).catch(()=>{});
}
setInterval(updateMoist, 1000);
updateMoist();
</script>
</body>
</html>
)rawliteral";

// ---------------- Moisture helpers ----------------
static inline int readMoistRaw() {
  // ใช้ ADC1 (ขา 32–39) เพื่อหลีกเลี่ยงชนกับ Wi-Fi
  return analogRead(MOIST_PIN);
}
static inline float rawToPercent(int raw) {
  // map: DRY -> 0%, WET -> 100% (clamp)
  float pct = 100.0f * ( (float)(ADC_DRY - raw) / (float)(ADC_DRY - ADC_WET) );
  if (isnan(pct) || isinf(pct)) pct = 0;
  if (pct < 0) pct = 0;
  if (pct > 100) pct = 100;
  return pct;
}

// ---------------- Handlers ----------------
void handleRoot() {
  server.send(200, "text/html", htmlPage);
}
void handleMoisture() {
  int raw = readMoistRaw();
  float pct = rawToPercent(raw);
  // กรองค่า EMA
  moist_pct_ema = (EMA_ALPHA * pct) + (1.0f - EMA_ALPHA) * moist_pct_ema;
  // ส่งกลับเป็นตัวเลขล้วน (เช่น 43.2)
  server.send(200, "text/plain", String(moist_pct_ema, 1));
}

void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {
  if (type == WStype_TEXT){
    String msg = String((char*)payload);
    msg.trim();
    Serial.println("Received: " + msg);

    if (msg.startsWith("MODE:")) {
      String newMode = msg.substring(5);
      mode = newMode;
      webSocket.broadcastTXT("MODE:" + mode);   // update clients
      Serial1.println(msg);                     // forward to Arduino
    } else {
      Serial1.println(msg);                     // forward command
      lastCommand = msg;
      webSocket.broadcastTXT(lastCommand);
    }
  }
}

// ---------------- Setup ----------------
void setup() {
  Serial.begin(115200);
  Serial1.begin(9600, SERIAL_8N1, 16, 17); // RX=16, TX=17 to Arduino

  // ADC setup
  analogReadResolution(ADC_BITS);
  analogSetPinAttenuation(MOIST_PIN, ADC_11db); // ช่วงกว้าง ~0–3.3V
  moist_pct_ema = 0.0f;

  WiFi.softAP(ssid, password);
  Serial.println("ESP32 AP started");
  Serial.println(WiFi.softAPIP());

  server.on("/", handleRoot);
  server.on("/moisture", handleMoisture);   // <— endpoint ใหม่
  server.begin();

  webSocket.begin();
  webSocket.onEvent(webSocketEvent);
}

// ---------------- Loop ----------------
void loop() {
  server.handleClient();
  webSocket.loop();
}
